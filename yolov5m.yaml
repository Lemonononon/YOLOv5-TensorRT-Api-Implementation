# parameters
nc: 3  # number of classes
depth_multiple: 0.67  # model depth multiple
width_multiple: 0.75  # layer channel multiple

# anchors
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# yolov5 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Focus, [64, 3]],  # 1-P1/2                   #torch.Size([1, 48, 320, 320])
   [-1, 1, Conv, [128, 3, 2]],  # 2-P2/4                #torch.Size([1, 96, 160, 160])
   [-1, 3, Bottleneck, [128]],                          #torch.Size([1, 96, 160, 160])
   [-1, 1, Conv, [256, 3, 2]],  # 4-P3/8                #torch.Size([1, 192, 80, 80])
   [-1, 9, BottleneckCSP, [256]],                       #torch.Size([1, 192, 80, 80])
   [-1, 1, Conv, [512, 3, 2]],  # 6-P4/16               #torch.Size([1, 384, 40, 40])
   [-1, 9, BottleneckCSP, [512]],                       #torch.Size([1, 384, 40, 40])
   [-1, 1, Conv, [1024, 3, 2]], # 8-P5/32               #torch.Size([1, 768, 20, 20])
   [-1, 1, SPP, [1024, [5, 9, 13]]],                    #torch.Size([1, 768, 20, 20])
   [-1, 6, BottleneckCSP, [1024]],  # 10                #torch.Size([1, 768, 20, 20])
  ]

# yolov5 head
head:
  [[-1, 3, BottleneckCSP, [1024, False]],  # 11                      #torch.Size([1, 768, 20, 20])
   [-1, 1, nn.Conv2d, [na * (nc + 5), 1, 1]],  # 12 (P5/32-large)    #torch.Size([1, 24, 20, 20])

   [-2, 1, nn.Upsample, [None, 2, 'nearest']],                       #torch.Size([1, 768, 40, 40])
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4                     #torch.Size([1, 1152, 40, 40])
   [-1, 1, Conv, [512, 1, 1]],                                       #torch.Size([1, 384, 40, 40])
   [-1, 3, BottleneckCSP, [512, False]],                             #torch.Size([1, 384, 40, 40])
   [-1, 1, nn.Conv2d, [na * (nc + 5), 1, 1]],  # 17 (P4/16-medium)   #torch.Size([1, 24, 40, 40])

   [-2, 1, nn.Upsample, [None, 2, 'nearest']],                       #torch.Size([1, 384, 80, 80])
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3                     #torch.Size([1, 576, 80, 80])
   [-1, 1, Conv, [256, 1, 1]],                                       #torch.Size([1, 192, 80, 80])
   [-1, 3, BottleneckCSP, [256, False]],                             #torch.Size([1, 192, 80, 80])
   [-1, 1, nn.Conv2d, [na * (nc + 5), 1, 1]],  # 22 (P3/8-small)     #torch.Size([1, 24, 80, 80])

   [[], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)             #torch.Size([1, 25200, 8])
  ]
